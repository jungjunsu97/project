#include <MFRC522.h>
#include <SPI.h>
#include "Adafruit_NeoTrellis.h"

#define BUZZER 25
#define RST_PIN 33
#define SS_PIN 5


MFRC522 mfrc(SS_PIN, RST_PIN); // MFRC522 객체 생성

// 카드 번호를 배열로 정의
byte validUID[] = {0x23, 0x09, 0x8D, 0x0F}; // 카드 번호 (23 9 8D F)
const int uidSize = sizeof(validUID) / sizeof(validUID[0]);

// 4x4 크기의 NeoTrellis 매트릭스 생성
Adafruit_NeoTrellis trellis;

// 키패드 배열: 도어락 숫자 키패드처럼 0~9와 *, #을 매핑
const char keypad[4][4] = {
  {'1', '2', '3', 'A'},  // A를 '*'로 사용
  {'4', '5', '6', 'B'},  // B를 '#'로 사용
  {'7', '8', '9', 'C'},  // 필요 시 다른 기능에 할당
  {'*', '0', '#', 'D'}   // D도 추가 기능에 사용 가능
};

// 비밀번호 관련 변수
const String correctPassword = "1234";  // 설정된 비밀번호
String inputPassword = "";  // 입력된 비밀번호

// 디바운싱 변수
const unsigned long debounceDelay = 50; // 50ms
unsigned long lastPressTime[16] = {0}; // 각 키의 마지막 눌림 시간 기록

// 콜백 함수: 키가 눌렸을 때 호출
TrellisCallback keyPressCallback(keyEvent evt) {
  // 눌린 키의 행과 열 계산
  uint8_t row = evt.bit.NUM / 4;
  uint8_t col = evt.bit.NUM % 4;

  // 눌린 키의 값 가져오기
  char pressedKey = keypad[row][col];

  // 현재 시간 가져오기
  unsigned long currentTime = millis();

  // Rising edge 처리
  if (evt.bit.EDGE == SEESAW_KEYPAD_EDGE_RISING) {
    if (currentTime - lastPressTime[evt.bit.NUM] > debounceDelay) {
      lastPressTime[evt.bit.NUM] = currentTime; // 현재 시간을 기록
      Serial.print("눌린 키: ");
      Serial.println(pressedKey);
      playButtonTone();
      handleKeyPress(pressedKey);

      // 색상 변경
      trellis.pixels.setPixelColor(evt.bit.NUM, Wheel(map(evt.bit.NUM, 0, trellis.pixels.numPixels(), 0, 255)));
      trellis.pixels.show();
    }
  } 
  // Falling edge 처리: 색상 초기화
  else if (evt.bit.EDGE == SEESAW_KEYPAD_EDGE_FALLING) {
    trellis.pixels.setPixelColor(evt.bit.NUM, 0); // 흰색으로 설정
    trellis.pixels.show();
  }

  return 0; // 콜백 함수는 항상 0을 반환해야 함
}

void setup() {
  Serial.begin(115200);
  pinMode(BUZZER,OUTPUT);
 
  SPI.begin(); // SPI 초기화
  mfrc.PCD_Init();


  // NeoTrellis 초기화
  if (!trellis.begin()) {
    Serial.println("NeoTrellis를 시작할 수 없습니다.");
    while (1);
  } else {
    Serial.println("NeoPixel Trellis started");
  }
 
  // 모든 키에 대한 콜백 함수 등록
  for (uint8_t i = 0; i < 16; i++) {
    trellis.activateKey(i, SEESAW_KEYPAD_EDGE_RISING);
    trellis.activateKey(i, SEESAW_KEYPAD_EDGE_FALLING);
    trellis.registerCallback(i, keyPressCallback); // 콜백 함수 등록
  }

  // 처음 시작했을때 한번 쭉 돌기
  for (uint16_t i = 0; i < 16; i++) {
    trellis.pixels.setPixelColor(i, Wheel(map(i, 0, trellis.pixels.numPixels(), 0, 255)));
    trellis.pixels.show();
    delay(50);
  }
 // 그 다음 시작 시 흰색 켜기
  for (uint8_t i = 0; i < 16; i++) {
    trellis.pixels.setPixelColor(i, 0); // 흰색으로 설정
  }
  trellis.pixels.show();
}
 
void loop() {
  // NeoTrellis에서 버튼 입력 확인
  trellis.read();
  checkRFID();
  delay(20); // trellis는 약 60Hz의 해상도를 가지고 있음
}

// 키 입력 처리 함수 (예: 비밀번호 입력 처리)
void handleKeyPress(char key) {
  // 키에 따른 동작 처리
  if (key == '*') {
    // '*' 키는 초기화, 삭제 등으로 사용 가능
    inputPassword = "";
    Serial.println("초기화");
  } else if (key == '#') {
    if (inputPassword == correctPassword) {
      Serial.println("비밀번호 일치! 도어 열림");
      playSuccessTone();  // 인증 성공 시 부저 울림
    } else {
      Serial.println("비밀번호 불일치! 도어 열 수 없음");
      playFailureTone();  // 인증 실패 시 부저 울림
    }
     inputPassword = "";  // 입력 초기화
  } else {
    inputPassword += key;  // 비밀번호에 키 추가
    Serial.print("현재 입력: ");
    Serial.println(inputPassword);
  }
}

// RFID 카드 확인 함수
void checkRFID() {
  // 카드가 인식되지 않으면 종료
  if (!mfrc.PICC_IsNewCardPresent() || !mfrc.PICC_ReadCardSerial()) {
    return;
  }

  // UID 비교 후 인증 성공 시 부저 울림
  if (compareUID(mfrc.uid.uidByte, mfrc.uid.size)) {
    Serial.println("RFID 인증 성공! 도어 열림");
    playSuccessTone();
  } else {
    Serial.println("인증 실패! 유효하지 않은 카드입니다.");
    playFailureTone();  // 인증 실패 시 부저 울림
  }

  mfrc.PICC_HaltA();  // RFID 작업 중지
  mfrc.PCD_StopCrypto1();
}

// UID 비교 함수
bool compareUID(byte *uid, byte size) {
  if (size != uidSize) return false;
  for (byte i = 0; i < size; i++) {
    if (uid[i] != validUID[i]) return false;
  }
  return true;
}



// 부저: 성공 시 소리
void playSuccessTone() {
  tone(BUZZER, 262, 200);  // 1000Hz, 0.2초 지속
  delay(200);
}

// 부저: 실패 시 소리
void playFailureTone() {
  tone(BUZZER, 294, 100);  // 500Hz, 0.1초 지속
  delay(100);
  
}

// 부저: 버튼 누를 때 소리
void playButtonTone() {
  tone(BUZZER, 440, 50);  // 2000Hz, 0.05초 지속
  delay(50);
  noTone(BUZZER);
}

// 위치에 따라서 색상 매핑해주기
uint32_t Wheel(byte WheelPos) {
  if (WheelPos < 85) {
    return trellis.pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if (WheelPos < 170) {
    WheelPos -= 85;
    return trellis.pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
    WheelPos -= 170;
    return trellis.pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  return 0;
}
