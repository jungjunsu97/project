include <MFRC522.h>           // RFID 리더기 라이브러리
#include <SPI.h>                // SPI 통신 라이브러리
#include "Adafruit_NeoTrellis.h" // NeoTrellis 매트릭스 키패드 라이브러리
#include <WiFi.h>               // Wi-Fi 기능을 위한 라이브러리

// Wi-Fi 설정 정보
const char* ssid = "polypoly";       // Wi-Fi SSID
const char* password = "123456789";  // Wi-Fi 비밀번호
const uint16_t port = 9000;          // 서버 포트 번호
const char* host = "192.168.0.18";   // 서버 IP 주소

WiFiClient client;  // Wi-Fi 클라이언트 객체

#define BUZZER 25   // 부저 핀 번호
#define RST_PIN 33  // RFID 리더기의 리셋 핀
#define SS_PIN 5    // RFID 리더기의 SS(슬레이브 선택) 핀

MFRC522 mfrc(SS_PIN, RST_PIN);  // RFID 리더기 객체 생성

// 유효한 RFID 카드의 UID (예시값)
byte validUID[] = {0x23, 0x09, 0x8D, 0x0F};  
const int uidSize = sizeof(validUID) / sizeof(validUID[0]);  // UID 배열 크기 계산

// NeoTrellis 키패드 설정
Adafruit_NeoTrellis trellis;
const char keypad[4][4] = {  // 키패드 매핑
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
const String correctPassword = "1234";  // 올바른 비밀번호
String inputPassword = "";              // 입력된 비밀번호를 저장할 변수

const unsigned long debounceDelay = 50;  // 키 입력 디바운스 딜레이(ms)
unsigned long lastPressTime[16] = {0};   // 각 키에 대한 마지막 입력 시간 저장

// 키 입력 콜백 함수
TrellisCallback keyPressCallback(keyEvent evt) {
  uint8_t row = evt.bit.NUM / 4;  // 눌린 키의 행 계산
  uint8_t col = evt.bit.NUM % 4;  // 눌린 키의 열 계산
  char pressedKey = keypad[row][col];  // 눌린 키 값
  unsigned long currentTime = millis();  // 현재 시간

  if (evt.bit.EDGE == SEESAW_KEYPAD_EDGE_RISING) {  // 키 눌림 감지
    if (currentTime - lastPressTime[evt.bit.NUM] > debounceDelay) {
      lastPressTime[evt.bit.NUM] = currentTime;  // 마지막 입력 시간 갱신
      Serial.print("눌린 키: ");
      Serial.println(pressedKey);
      playButtonTone();  // 부저 울림
      handleKeyPress(pressedKey);  // 키 처리 함수 호출

      // 눌린 키에 맞게 LED 색상 변경
      trellis.pixels.setPixelColor(evt.bit.NUM, Wheel(map(evt.bit.NUM, 0, trellis.pixels.numPixels(), 0, 255)));
      trellis.pixels.show();
    }
  } else if (evt.bit.EDGE == SEESAW_KEYPAD_EDGE_FALLING) {  // 키 떼짐 감지
    trellis.pixels.setPixelColor(evt.bit.NUM, 0);  // LED 끄기
    trellis.pixels.show();
  }
  return 0;
}

void setup() {
  Serial.begin(115200);  // 시리얼 통신 시작
  pinMode(BUZZER, OUTPUT);  // 부저 핀을 출력으로 설정
  
  SPI.begin();  // SPI 통신 시작
  mfrc.PCD_Init();  // RFID 리더기 초기화

  // Wi-Fi 연결 시도
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Wi-Fi 연결 중...");
  }
  Serial.print("Wi-Fi 연결 성공! IP: ");
  Serial.println(WiFi.localIP());  // 할당된 IP 출력

  // 서버 연결 시도
  if (!client.connect(host, port)) {
    Serial.println("서버 연결 실패");
  }

  // NeoTrellis 초기화
  if (!trellis.begin()) {
    Serial.println("NeoTrellis 초기화 실패");
    while (1);  // 무한 루프 (오류 시 멈춤)
  }

  // 각 키에 대해 콜백 함수 등록
  for (uint8_t i = 0; i < 16; i++) {
    trellis.activateKey(i, SEESAW_KEYPAD_EDGE_RISING);
    trellis.activateKey(i, SEESAW_KEYPAD_EDGE_FALLING);
    trellis.registerCallback(i, keyPressCallback);
  }

  // LED 초기 애니메이션
  for (uint16_t i = 0; i < 16; i++) {
    trellis.pixels.setPixelColor(i, Wheel(map(i, 0, trellis.pixels.numPixels(), 0, 255)));
    trellis.pixels.show();
    delay(50);
  }
  for (uint8_t i = 0; i < 16; i++) {
    trellis.pixels.setPixelColor(i, 0); // 흰색으로 설정
  }

  trellis.pixels.show();  // 최종 LED 상태 표시
}

void loop() {
  trellis.read();  // 키패드 입력 읽기
  checkRFID();  // RFID 카드 체크

  // 서버로부터 데이터 수신
  if (client.available()) {
    String received = client.readStringUntil('\n');
    Serial.println("서버로부터 수신: " + received);
  }

  // 서버 연결 상태 점검 및 재연결 시도
  if (!client.connected()) {
    Serial.println("서버 연결 끊김. 재연결 중...");
    if (!client.connect(host, port)) {
      Serial.println("서버 재연결 실패");
    }
  }
  delay(20);  // 주기적 딜레이
}

// 키 입력 처리 함수
void handleKeyPress(char key) {
  if (key == '*') {  // 입력 초기화
    inputPassword = "";
    Serial.println("입력 초기화");
  } else if (key == '#') {  // 비밀번호 확인
    if (inputPassword == correctPassword) {
      Serial.println("비밀번호 일치! 도어 열림");
      playSuccessTone();
      client.println("Password Success");  // 서버에 성공 메시지 전송
    } else {
      Serial.println("비밀번호 불일치! 도어 열 수 없음");
      playFailureTone();
      client.println("Password Failed");  // 서버에 실패 메시지 전송
    }
    inputPassword = "";  // 입력 초기화
  } else {  // 키 입력 추가
    inputPassword += key;
    Serial.print("현재 입력: ");
    Serial.println(inputPassword);
  }
}

// RFID 카드 체크 함수
void checkRFID() {
  if (!mfrc.PICC_IsNewCardPresent() || !mfrc.PICC_ReadCardSerial()) {
    return;  // 카드가 없으면 종료
  }

  if (compareUID(mfrc.uid.uidByte, mfrc.uid.size)) {  // UID 비교
    Serial.println("RFID 인증 성공! 도어 열림");
    playSuccessTone();
    client.println("RFID Success");  // 서버에 성공 메시지 전송
  } else {
    Serial.println("RFID 인증 실패");
    playFailureTone();
    client.println("RFID Failed");  // 서버에 실패 메시지 전송
  }

  mfrc.PICC_HaltA();  // 카드 정지
  mfrc.PCD_StopCrypto1();  // 통신 종료
}

// 카드 UID 비교 함수
bool compareUID(byte* uid, byte size) {
  if (size != uidSize) return false;  // 크기 비교
  for (byte i = 0; i < size; i++) {
    if (uid[i] != validUID[i]) return false;  // UID 값 비교
  }
  return true;
}

// 성공음 재생 함수
void playSuccessTone() {
  tone(BUZZER, 262, 200);
  delay(200);
}

// 실패음 재생 함수
void playFailureTone() {
  tone(BUZZER, 294, 100);
  delay(100);
}

// 버튼음 재생 함수
void playButtonTone() {
  tone(BUZZER, 440, 50);
  delay(50);
  noTone(BUZZER);
}

// RGB 휠 색상 함수
uint32_t Wheel(byte WheelPos) {
  if (WheelPos < 85) {
    return trellis.pixels.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if (WheelPos < 170) {
    WheelPos -= 85;
    return trellis.pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
    WheelPos -= 170;
    return trellis.pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
  return 0;
}
